plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4' apply false
    id 'io.spring.dependency-management' version '1.1.4' apply false
    id 'io.freefair.lombok' version '6.2.0' apply false
    id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_17
}

allprojects {
    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'jacoco'
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'io.freefair.lombok'

    dependencies {

        // Define dependencies common to all subprojects
        implementation 'org.springframework.boot:spring-boot-starter-amqp'
        implementation 'org.springframework.boot:spring-boot-starter-data-rest'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.3'
        implementation 'org.springframework.amqp:spring-rabbit-stream'
        implementation 'org.springframework.cloud:spring-cloud-bus:4.1.1'
        implementation 'org.springframework.cloud:spring-cloud-stream:4.1.1'
        implementation 'org.springframework.cloud:spring-cloud-stream-binder-rabbit:4.1.1'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.2.4'
        implementation 'org.liquibase:liquibase-core'
        implementation 'org.postgresql:postgresql'

        // Lombok dependency
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        // Test dependencies
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.springframework.boot:spring-boot-testcontainers'
        testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:3.0.3'
        testImplementation 'org.springframework.amqp:spring-rabbit-test'
        testImplementation 'org.springframework.cloud:spring-cloud-stream-test-binder:4.0.3'
        testImplementation 'org.testcontainers:junit-jupiter'
        testImplementation 'org.testcontainers:rabbitmq'
        testImplementation 'org.testcontainers:postgresql'
        testImplementation 'org.testcontainers:testcontainers'

        // Cacheing
        implementation 'org.springframework.boot:spring-boot-starter-cache'
        implementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'

        // Lombok for testing
        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'
    }
}

ext {
    set('springCloudVersion', "2023.0.1")
}


tasks.register('copyArtifactsForIntegrationTest', Copy) {

    // Set a strategy to include and hence overwrite existing files
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    dependsOn 'build'

    from('balance/build/libs') { include '*SNAPSHOT.jar' }
    from('transaction/build/libs') { include '*SNAPSHOT.jar' }
    from('common/build/libs') { include '*SNAPSHOT.jar' }

    // Define the target directory within the 'account' project's test resources
    into 'account/src/test/resources'
}


// Task at the root level to run integration tests across subprojects
tasks.register('integrationTest', Test) {
    // Currently only Account service has integration tests as required
    description = 'Runs integration tests across all subprojects.'
    group = 'verification'

    // Define a classpath that includes the test runtime classpaths of all subprojects
    classpath = files(subprojects.collect {
        it.tasks.withType(Test).findByName('test')?.classpath
    })

    // Define where Gradle should look for test classes across subprojects
    testClassesDirs = files(subprojects.collect {
        it.sourceSets.test.output.classesDirs
    })

    useJUnitPlatform()
}


tasks.named('processTestResources') {
    mustRunAfter 'copyArtifactsForIntegrationTest'
    dependsOn 'copyArtifactsForIntegrationTest'
}
