plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4' apply false
    id 'io.spring.dependency-management' version '1.1.4' apply false
    id 'io.freefair.lombok' version '6.2.0' apply false
    id 'jacoco'
    id 'jacoco-report-aggregation'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_17
}

allprojects {
    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'jacoco'
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'io.freefair.lombok'

    dependencies {
        // SPRING
        implementation 'org.springframework.boot:spring-boot-starter-amqp'
        implementation 'org.springframework.boot:spring-boot-starter-data-rest'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.amqp:spring-rabbit-stream'
        implementation 'org.springframework.cloud:spring-cloud-bus:4.1.1'
        implementation 'org.springframework.cloud:spring-cloud-stream:4.1.1'
        implementation 'org.springframework.cloud:spring-cloud-stream-binder-rabbit:4.1.1'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.2.4'
        implementation 'org.springframework.boot:spring-boot-starter-actuator:3.2.4'

        // DATABASE
        implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.3'
        implementation 'org.liquibase:liquibase-core'
        implementation 'org.postgresql:postgresql'

        // TESTING
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.springframework.boot:spring-boot-testcontainers'
        testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:3.0.3'
        testImplementation 'org.springframework.amqp:spring-rabbit-test'
        testImplementation 'org.springframework.cloud:spring-cloud-stream-test-binder:4.0.3'
        testImplementation 'org.testcontainers:junit-jupiter'
        testImplementation 'org.testcontainers:rabbitmq'
        testImplementation 'org.testcontainers:postgresql'
        testImplementation 'org.testcontainers:testcontainers'
        implementation 'org.springframework.boot:spring-boot-starter-cache'
        implementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'
        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'
    }

    test {
        finalizedBy jacocoTestReport
    }

    jacocoTestReport {
        dependsOn test
        additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
        reports {
            xml.required = true
            html.required = true
            html.outputLocation = layout.buildDirectory.dir("reports/jacoco/html")
            xml.outputLocation = layout.buildDirectory.file("reports/jacoco/report.xml")
        }
    }
}

ext {
    set('springCloudVersion', "2023.0.1")
}

tasks.register('copyArtifactsForIntegrationTest', Copy) {

}

tasks.register('integrationTest', Test) {
    description = 'Runs integration tests across all subprojects.'
    group = 'verification'

    // Ensure the jar tasks for each relevant subproject are completed before this task runs
    dependsOn subprojects*.tasks*.withType(Jar)

    doFirst {
        // Print a message about starting the build and copy process
        println "Building and copying artifacts..."

        // Perform the copying of artifacts directly within the doFirst action
        project.copy {
            duplicatesStrategy = DuplicatesStrategy.INCLUDE
            from('balance/build/libs') {
                include '*SNAPSHOT.jar'
            }
            from('transaction/build/libs') {
                include '*SNAPSHOT.jar'
            }
            from('common/build/libs') {
                include '*SNAPSHOT.jar'
            }
            into 'account/src/test/resources'
        }
        println "Artifacts copied to 'account/src/test/resources'"
    }

    // Set up classpaths and test classes directories
    classpath = files(subprojects.collect {
        it.tasks.withType(Test).findByName('test')?.classpath
    })
    testClassesDirs = files(subprojects.collect {
        it.sourceSets.test.output.classesDirs
    })
    useJUnitPlatform()
}

tasks.register('jacocoRootReport', JacocoReport) {
    description = 'Generates an aggregated report from all subprojects.'
    group = 'verification'

    // Gather execution data from all subprojects
    executionData fileTree(dir: '.', include: '**/build/jacoco/*.exec')

    // Define the class files and source structure
    subprojects.each { subproject ->
        sourceSets(subproject.sourceSets.main)
    }

    // Correctly configure the report outputs using the Gradle Provider API
    reports {
        xml {
            destination = layout.buildDirectory.file("reports/jacoco/aggregatedXml.xml").get().asFile
        }
        html {
            destination = layout.buildDirectory.dir("reports/jacoco/aggregatedHtml").get().asFile
        }
    }
}

tasks.register('aggregateTestReports') {
    doLast {
        file("$buildDir/reports/tests/aggregate").mkdirs()
        fileTree(dir: '.', include: '**/build/test-results/test/**').copy {
            into "$buildDir/reports/tests/aggregate"
        }
    }
}

configurations {
    integTestImplementation.extendsFrom testImplementation
    integTestRuntimeOnly.extendsFrom testRuntimeOnly
}

check.dependsOn integrationTest